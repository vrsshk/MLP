#pragma once 
#include "include.h"

enum activation_function { sigmoid, thx, RelU }; 

/**
 * @brief Класс для функций активации.
 * 
 * Этот класс предоставляет интерфейс для работы с функциями активации в нейронных сетях.
 * Он позволяет установить функцию активации, использовать ее для преобразования входных значений,
 * а также вычислить производную функции активации для заданного значения.
 */
class Func 
{
private: 
	/**
	 * @brief Функция активации.
	 * 
	 * Хранит указатель на функцию активации, установленную с помощью метода Set().
	 */
	activation_function f;

public: 
	/**
	 * @brief Установить функцию активации.
	 * 
	 * Устанавливает функцию активации из списка: sigmoid, thx, RelU .
	 */
	void Set();

	/**
	 * @brief Применить функцию активации к вектору значений.
	 * 
	 * Применяет установленную функцию активации к каждому элементу вектора a и возвращает результат.
	 * 
	 * @param a Вектор входных значений.
	 */
	void Use(std::vector<double>& a);

	/**
	 * @brief Применить производную функции активации к вектору значений.
	 * 
	 * Применяет производную установленной функции активации к каждому элементу вектора a и возвращает результат.
	 * 
	 * @param a Вектор входных значений.
	 */
	void UseDerivative(std::vector<double>& a);

	/**
	 * @brief Применить производную функции активации к одиночному значению.
	 * 
	 * Применяет производную установленной функции активации к заданному значению и возвращает результат.
	 * 
	 * @param value Входное значение.
	 * @return Результат применения производной функции активации.
	 */
	double UseDerivative(double value);
};