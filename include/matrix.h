#pragma once
#include "include.h"

/**
 * @brief Класс для работы с матрицами.
 * 
 * Этот класс предоставляет интерфейс для создания и манипуляции матрицами.
 * Он позволяет создавать матрицы с заданным количеством строк и столбцов,
 * получать и устанавливать значения элементов матрицы, а также выполнять различные операции над матрицами.
 */
class Matrix {
private:
    /**
     * @brief Количество строк в матрице.
     */
    size_t row;

    /**
     * @brief Количество столбцов в матрице.
     */
    size_t col;

    /**
     * @brief Матрица.
     */
    std::vector<std::vector<double>> matrix;

public:
    /**
     * @brief Конструктор по умолчанию.
     * 
     * Создает пустую матрицу с нулевым количеством строк и столбцов.
     */
    Matrix() : row(0), col(0), matrix() {}

    /**
     * @brief Конструктор с заданным количеством строк и столбцов.
     * 
     * Создает матрицу с заданным количеством строк и столбцов.
     * 
     * @param row Количество строк в матрице.
     * @param col Количество столбцов в матрице.
     */
    Matrix(size_t row, size_t col);

    /**
     * @brief Получить количество строк в матрице.
     * 
     * Возвращает количество строк в матрице.
     * 
     * @return Количество строк в матрице.
     */
    size_t getRow() const { return row; }

    /**
     * @brief Получить количество столбцов в матрице.
     * 
     * Возвращает количество столбцов в матрице.
     * 
     * @return Количество столбцов в матрице.
     */
    size_t getCol() const { return col; }

    /**
     * @brief Получить значение элемента матрицы.
     * 
     * Возвращает значение элемента матрицы по заданным индексам строки и столбца.
     * 
     * @param i Индекс строки.
     * @param j Индекс столбца.
     * @return Значение элемента матрицы.
     */
    double get(size_t i, size_t j) const { return matrix[i][j]; }

    /**
     * @brief Установить значение элемента матрицы.
     * 
     * Устанавливает значение элемента матрицы по заданным индексам строки и столбца.
     * 
     * @param i Индекс строки.
     * @param j Индекс столбца.
     * @param value Новое значение элемента матрицы.
     */
    void set(size_t i, size_t j, double value);

    /**
     * @brief Инициализировать матрицу случайными значениями.
     * 
     * Инициализирует матрицу случайными значениями.
     */
    void Rand();

    /**
     * @brief Умножить матрицу на вектор.
     * 
     * Умножает матрицу на вектор и возвращает результат.
     * 
     * @param m Матрица.
     * @param b Вектор.
     * @return Результат умножения матрицы на вектор.
     */
    static std::vector<double> MultVec(const Matrix& m, const std::vector<double>& b);

    /**
     * @brief Сложить два вектора.
     * 
     * Складывает два вектора и возвращает результат.
     * 
     * @param a Первый вектор.
     * @param b Второй вектор.
     * @return Результат сложения векторов.
     */
    static std::vector<double> SumVec(const std::vector<double>& a, const std::vector<double>& b);

    /**
     * @brief Транспонировать матрицу.
     * 
     * Возвращает транспонированную матрицу.
     * 
     * @return Транспонированная матрица.
     */
    Matrix transpose() const;

    /**
     * @brief Перегруженный оператор вывода.
     * 
     * Выводит матрицу в указанный поток вывода.
     * 
     * @param os Поток вывода.
     * @param m Матрица для вывода.
     * @return Поток вывода.
     */
    friend std::ostream& operator <<(std::ostream& os, const Matrix& m);

    /**
     * @brief Перегруженный оператор ввода.
     * 
     * Вводит матрицу из указанного потока ввода.
     * 
     * @param is Поток ввода.
     * @param m Матрица для ввода.
     * @return Поток ввода.
     */
    friend std::istream& operator >>(std::istream& is, Matrix& m);
};

